/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __llvm__: ::std::os::raw::c_uint = 1;
pub const __clang__: ::std::os::raw::c_uint = 1;
pub const __clang_major__: ::std::os::raw::c_uint = 4;
pub const __clang_minor__: ::std::os::raw::c_uint = 0;
pub const __clang_patchlevel__: ::std::os::raw::c_uint = 0;
pub const __clang_version__: &'static [u8; 31usize] =
    b"4.0.0 (tags/RELEASE_400/final)\x00";
pub const __GNUC_MINOR__: ::std::os::raw::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uint = 1;
pub const __GNUC__: ::std::os::raw::c_uint = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_uint = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uint = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uint = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uint = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uint = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uint = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uint = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uint = 1;
pub const __VERSION__: &'static [u8; 54usize] =
    b"4.2.1 Compatible Clang 4.0.0 (tags/RELEASE_400/final)\x00";
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_uint = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1;
pub const _LP64: ::std::os::raw::c_uint = 1;
pub const __LP64__: ::std::os::raw::c_uint = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uint = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uint = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_int = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_int = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_int = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uint = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uint = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uint = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uint = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_int = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_int = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uint = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_uint = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_int = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_int = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_uint = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_int = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_int = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uint = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uint = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: ::std::os::raw::c_uint = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINT64_MAX__: ::std::os::raw::c_int = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uint = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uint = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uint = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uint = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __amd64__: ::std::os::raw::c_uint = 1;
pub const __amd64: ::std::os::raw::c_uint = 1;
pub const __x86_64: ::std::os::raw::c_uint = 1;
pub const __x86_64__: ::std::os::raw::c_uint = 1;
pub const __k8: ::std::os::raw::c_uint = 1;
pub const __k8__: ::std::os::raw::c_uint = 1;
pub const __tune_k8__: ::std::os::raw::c_uint = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uint = 1;
pub const __FXSR__: ::std::os::raw::c_uint = 1;
pub const __SSE2__: ::std::os::raw::c_uint = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uint = 1;
pub const __SSE__: ::std::os::raw::c_uint = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uint = 1;
pub const __MMX__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uint = 1;
pub const unix: ::std::os::raw::c_uint = 1;
pub const __unix: ::std::os::raw::c_uint = 1;
pub const __unix__: ::std::os::raw::c_uint = 1;
pub const linux: ::std::os::raw::c_uint = 1;
pub const __linux: ::std::os::raw::c_uint = 1;
pub const __linux__: ::std::os::raw::c_uint = 1;
pub const __gnu_linux__: ::std::os::raw::c_uint = 1;
pub const __ELF__: ::std::os::raw::c_uint = 1;
pub const __FLOAT128__: ::std::os::raw::c_uint = 1;
pub const __STDC__: ::std::os::raw::c_uint = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uint = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uint = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 25;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 0;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const __lldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UINTN_IDENTITY_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timeval_defined: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const __WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _SYS_SYSMACROS_H_OUTER: ::std::os::raw::c_uint = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_attr_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (::std::mem::align_of::<__pthread_internal_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __next as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __spins as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __spins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __elision as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __elision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __list as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __bindgen_anon_1: pthread_cond_t__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: pthread_cond_t__bindgen_ty_1__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    pub __wseq: __BindgenUnionField<::std::os::raw::c_ulonglong>,
    pub __wseq32: __BindgenUnionField<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_1 )
                ) . __wseq32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( __wseq32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    pub __g1_start: __BindgenUnionField<::std::os::raw::c_ulonglong>,
    pub __g1_start32: __BindgenUnionField<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __low as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __low ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ) .
                __high as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 ) ,
                "::" , stringify ! ( __high ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start ) ));
    assert_eq! (unsafe {
                & (
                * ( 0 as * const pthread_cond_t__bindgen_ty_1__bindgen_ty_2 )
                ) . __g1_start32 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1__bindgen_ty_2 ) , "::" ,
                stringify ! ( __g1_start32 ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>() , 48usize
               , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_refs as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_refs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_size as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __g_size
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g1_orig_size as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g1_orig_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wrefs as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __wrefs
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __g_signals as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __g_signals ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_condattr_t>() , 4usize , concat !
               ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_condattr_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               56usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __wrphase_futex as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wrphase_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writers_futex as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writers_futex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad3 as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad4 as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __cur_writer as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __cur_writer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad1 as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t>() , 56usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlockattr_t>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlockattr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrier_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_barrier_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::std::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::std::mem::align_of::<random_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::std::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_ref(udev: *mut udev) -> *mut udev;
}
extern "C" {
    pub fn udev_unref(udev: *mut udev) -> *mut udev;
}
extern "C" {
    pub fn udev_new() -> *mut udev;
}
extern "C" {
    pub fn udev_set_log_fn(udev: *mut udev,
                           log_fn:
                               ::std::option::Option<unsafe extern "C" fn(udev:
                                                                              *mut udev,
                                                                          priority:
                                                                              ::std::os::raw::c_int,
                                                                          file:
                                                                              *const ::std::os::raw::c_char,
                                                                          line:
                                                                              ::std::os::raw::c_int,
                                                                          fn_:
                                                                              *const ::std::os::raw::c_char,
                                                                          format:
                                                                              *const ::std::os::raw::c_char,
                                                                          args:
                                                                              *mut __va_list_tag)>);
}
extern "C" {
    pub fn udev_get_log_priority(udev: *mut udev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_set_log_priority(udev: *mut udev,
                                 priority: ::std::os::raw::c_int);
}
extern "C" {
    pub fn udev_get_userdata(udev: *mut udev) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn udev_set_userdata(udev: *mut udev,
                             userdata: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_list_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_list_entry_get_next(list_entry: *mut udev_list_entry)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_list_entry_get_by_name(list_entry: *mut udev_list_entry,
                                       name: *const ::std::os::raw::c_char)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_list_entry_get_name(list_entry: *mut udev_list_entry)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_list_entry_get_value(list_entry: *mut udev_list_entry)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_device_ref(udev_device: *mut udev_device) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_unref(udev_device: *mut udev_device)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_udev(udev_device: *mut udev_device) -> *mut udev;
}
extern "C" {
    pub fn udev_device_new_from_syspath(udev: *mut udev,
                                        syspath:
                                            *const ::std::os::raw::c_char)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_devnum(udev: *mut udev,
                                       type_: ::std::os::raw::c_char,
                                       devnum: dev_t) -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_subsystem_sysname(udev: *mut udev,
                                                  subsystem:
                                                      *const ::std::os::raw::c_char,
                                                  sysname:
                                                      *const ::std::os::raw::c_char)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_device_id(udev: *mut udev,
                                          id: *const ::std::os::raw::c_char)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_new_from_environment(udev: *mut udev)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_parent(udev_device: *mut udev_device)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_parent_with_subsystem_devtype(udev_device:
                                                             *mut udev_device,
                                                         subsystem:
                                                             *const ::std::os::raw::c_char,
                                                         devtype:
                                                             *const ::std::os::raw::c_char)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_device_get_devpath(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_subsystem(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_devtype(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_syspath(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_sysname(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_sysnum(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_devnode(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_is_initialized(udev_device: *mut udev_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_device_get_devlinks_list_entry(udev_device: *mut udev_device)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_properties_list_entry(udev_device:
                                                     *mut udev_device)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_tags_list_entry(udev_device: *mut udev_device)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_sysattr_list_entry(udev_device: *mut udev_device)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_device_get_property_value(udev_device: *mut udev_device,
                                          key: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_driver(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_devnum(udev_device: *mut udev_device) -> dev_t;
}
extern "C" {
    pub fn udev_device_get_action(udev_device: *mut udev_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_get_seqnum(udev_device: *mut udev_device)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn udev_device_get_usec_since_initialized(udev_device:
                                                      *mut udev_device)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn udev_device_get_sysattr_value(udev_device: *mut udev_device,
                                         sysattr:
                                             *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn udev_device_set_sysattr_value(udev_device: *mut udev_device,
                                         sysattr:
                                             *const ::std::os::raw::c_char,
                                         value: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_device_has_tag(udev_device: *mut udev_device,
                               tag: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_monitor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_monitor_ref(udev_monitor: *mut udev_monitor)
     -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_unref(udev_monitor: *mut udev_monitor)
     -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_get_udev(udev_monitor: *mut udev_monitor)
     -> *mut udev;
}
extern "C" {
    pub fn udev_monitor_new_from_netlink(udev: *mut udev,
                                         name: *const ::std::os::raw::c_char)
     -> *mut udev_monitor;
}
extern "C" {
    pub fn udev_monitor_enable_receiving(udev_monitor: *mut udev_monitor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_set_receive_buffer_size(udev_monitor:
                                                    *mut udev_monitor,
                                                size: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_get_fd(udev_monitor: *mut udev_monitor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_receive_device(udev_monitor: *mut udev_monitor)
     -> *mut udev_device;
}
extern "C" {
    pub fn udev_monitor_filter_add_match_subsystem_devtype(udev_monitor:
                                                               *mut udev_monitor,
                                                           subsystem:
                                                               *const ::std::os::raw::c_char,
                                                           devtype:
                                                               *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_add_match_tag(udev_monitor: *mut udev_monitor,
                                             tag:
                                                 *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_update(udev_monitor: *mut udev_monitor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_monitor_filter_remove(udev_monitor: *mut udev_monitor)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_enumerate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_enumerate_ref(udev_enumerate: *mut udev_enumerate)
     -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_unref(udev_enumerate: *mut udev_enumerate)
     -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_get_udev(udev_enumerate: *mut udev_enumerate)
     -> *mut udev;
}
extern "C" {
    pub fn udev_enumerate_new(udev: *mut udev) -> *mut udev_enumerate;
}
extern "C" {
    pub fn udev_enumerate_add_match_subsystem(udev_enumerate:
                                                  *mut udev_enumerate,
                                              subsystem:
                                                  *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_nomatch_subsystem(udev_enumerate:
                                                    *mut udev_enumerate,
                                                subsystem:
                                                    *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_sysattr(udev_enumerate:
                                                *mut udev_enumerate,
                                            sysattr:
                                                *const ::std::os::raw::c_char,
                                            value:
                                                *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_nomatch_sysattr(udev_enumerate:
                                                  *mut udev_enumerate,
                                              sysattr:
                                                  *const ::std::os::raw::c_char,
                                              value:
                                                  *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_property(udev_enumerate:
                                                 *mut udev_enumerate,
                                             property:
                                                 *const ::std::os::raw::c_char,
                                             value:
                                                 *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_sysname(udev_enumerate:
                                                *mut udev_enumerate,
                                            sysname:
                                                *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_tag(udev_enumerate: *mut udev_enumerate,
                                        tag: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_parent(udev_enumerate:
                                               *mut udev_enumerate,
                                           parent: *mut udev_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_match_is_initialized(udev_enumerate:
                                                       *mut udev_enumerate)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_add_syspath(udev_enumerate: *mut udev_enumerate,
                                      syspath: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_scan_devices(udev_enumerate: *mut udev_enumerate)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_scan_subsystems(udev_enumerate: *mut udev_enumerate)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_enumerate_get_list_entry(udev_enumerate: *mut udev_enumerate)
     -> *mut udev_list_entry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_queue {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_queue_ref(udev_queue: *mut udev_queue) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_unref(udev_queue: *mut udev_queue) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_get_udev(udev_queue: *mut udev_queue) -> *mut udev;
}
extern "C" {
    pub fn udev_queue_new(udev: *mut udev) -> *mut udev_queue;
}
extern "C" {
    pub fn udev_queue_get_kernel_seqnum(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn udev_queue_get_udev_seqnum(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn udev_queue_get_udev_is_active(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_get_queue_is_empty(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_get_seqnum_is_finished(udev_queue: *mut udev_queue,
                                             seqnum:
                                                 ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_get_seqnum_sequence_is_finished(udev_queue:
                                                          *mut udev_queue,
                                                      start:
                                                          ::std::os::raw::c_ulonglong,
                                                      end:
                                                          ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_get_fd(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_flush(udev_queue: *mut udev_queue)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn udev_queue_get_queued_list_entry(udev_queue: *mut udev_queue)
     -> *mut udev_list_entry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_hwdb {
    _unused: [u8; 0],
}
extern "C" {
    pub fn udev_hwdb_new(udev: *mut udev) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_ref(hwdb: *mut udev_hwdb) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_unref(hwdb: *mut udev_hwdb) -> *mut udev_hwdb;
}
extern "C" {
    pub fn udev_hwdb_get_properties_list_entry(hwdb: *mut udev_hwdb,
                                               modalias:
                                                   *const ::std::os::raw::c_char,
                                               flags: ::std::os::raw::c_uint)
     -> *mut udev_list_entry;
}
extern "C" {
    pub fn udev_util_encode_string(str: *const ::std::os::raw::c_char,
                                   str_enc: *mut ::std::os::raw::c_char,
                                   len: usize) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_device_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_seat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_tablet_tool {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_device_notify {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_keyboard {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_pointer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_touch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_tablet_tool {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_tablet_pad {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_log_priority {
    LIBINPUT_LOG_PRIORITY_DEBUG = 10,
    LIBINPUT_LOG_PRIORITY_INFO = 20,
    LIBINPUT_LOG_PRIORITY_ERROR = 30,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_device_capability {
    LIBINPUT_DEVICE_CAP_KEYBOARD = 0,
    LIBINPUT_DEVICE_CAP_POINTER = 1,
    LIBINPUT_DEVICE_CAP_TOUCH = 2,
    LIBINPUT_DEVICE_CAP_TABLET_TOOL = 3,
    LIBINPUT_DEVICE_CAP_TABLET_PAD = 4,
    LIBINPUT_DEVICE_CAP_GESTURE = 5,
    LIBINPUT_DEVICE_CAP_SWITCH = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_key_state {
    LIBINPUT_KEY_STATE_RELEASED = 0,
    LIBINPUT_KEY_STATE_PRESSED = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_led {
    LIBINPUT_LED_NUM_LOCK = 1,
    LIBINPUT_LED_CAPS_LOCK = 2,
    LIBINPUT_LED_SCROLL_LOCK = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_button_state {
    LIBINPUT_BUTTON_STATE_RELEASED = 0,
    LIBINPUT_BUTTON_STATE_PRESSED = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_pointer_axis {
    LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL = 0,
    LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_pointer_axis_source {
    LIBINPUT_POINTER_AXIS_SOURCE_WHEEL = 1,
    LIBINPUT_POINTER_AXIS_SOURCE_FINGER = 2,
    LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS = 3,
    LIBINPUT_POINTER_AXIS_SOURCE_WHEEL_TILT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_tablet_pad_ring_axis_source {
    LIBINPUT_TABLET_PAD_RING_SOURCE_UNKNOWN = 1,
    LIBINPUT_TABLET_PAD_RING_SOURCE_FINGER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_tablet_pad_strip_axis_source {
    LIBINPUT_TABLET_PAD_STRIP_SOURCE_UNKNOWN = 1,
    LIBINPUT_TABLET_PAD_STRIP_SOURCE_FINGER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_tablet_tool_type {
    LIBINPUT_TABLET_TOOL_TYPE_PEN = 1,
    LIBINPUT_TABLET_TOOL_TYPE_ERASER = 2,
    LIBINPUT_TABLET_TOOL_TYPE_BRUSH = 3,
    LIBINPUT_TABLET_TOOL_TYPE_PENCIL = 4,
    LIBINPUT_TABLET_TOOL_TYPE_AIRBRUSH = 5,
    LIBINPUT_TABLET_TOOL_TYPE_MOUSE = 6,
    LIBINPUT_TABLET_TOOL_TYPE_LENS = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_tablet_tool_proximity_state {
    LIBINPUT_TABLET_TOOL_PROXIMITY_STATE_OUT = 0,
    LIBINPUT_TABLET_TOOL_PROXIMITY_STATE_IN = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_tablet_tool_tip_state {
    LIBINPUT_TABLET_TOOL_TIP_UP = 0,
    LIBINPUT_TABLET_TOOL_TIP_DOWN = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_tablet_pad_mode_group {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libinput_device_tablet_pad_get_num_mode_groups(device:
                                                              *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_tablet_pad_get_mode_group(device:
                                                         *mut libinput_device,
                                                     index:
                                                         ::std::os::raw::c_uint)
     -> *mut libinput_tablet_pad_mode_group;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_get_index(group:
                                                        *mut libinput_tablet_pad_mode_group)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_get_num_modes(group:
                                                            *mut libinput_tablet_pad_mode_group)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_get_mode(group:
                                                       *mut libinput_tablet_pad_mode_group)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_has_button(group:
                                                         *mut libinput_tablet_pad_mode_group,
                                                     button:
                                                         ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_has_ring(group:
                                                       *mut libinput_tablet_pad_mode_group,
                                                   ring:
                                                       ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_has_strip(group:
                                                        *mut libinput_tablet_pad_mode_group,
                                                    strip:
                                                        ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_button_is_toggle(group:
                                                               *mut libinput_tablet_pad_mode_group,
                                                           button:
                                                               ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_ref(group:
                                                  *mut libinput_tablet_pad_mode_group)
     -> *mut libinput_tablet_pad_mode_group;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_unref(group:
                                                    *mut libinput_tablet_pad_mode_group)
     -> *mut libinput_tablet_pad_mode_group;
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_set_user_data(group:
                                                            *mut libinput_tablet_pad_mode_group,
                                                        user_data:
                                                            *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_tablet_pad_mode_group_get_user_data(group:
                                                            *mut libinput_tablet_pad_mode_group)
     -> *mut ::std::os::raw::c_void;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_switch_state {
    LIBINPUT_SWITCH_STATE_OFF = 0,
    LIBINPUT_SWITCH_STATE_ON = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_switch { LIBINPUT_SWITCH_LID = 1, }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_switch {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_event_type {
    LIBINPUT_EVENT_NONE = 0,
    LIBINPUT_EVENT_DEVICE_ADDED = 1,
    LIBINPUT_EVENT_DEVICE_REMOVED = 2,
    LIBINPUT_EVENT_KEYBOARD_KEY = 300,
    LIBINPUT_EVENT_POINTER_MOTION = 400,
    LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE = 401,
    LIBINPUT_EVENT_POINTER_BUTTON = 402,
    LIBINPUT_EVENT_POINTER_AXIS = 403,
    LIBINPUT_EVENT_TOUCH_DOWN = 500,
    LIBINPUT_EVENT_TOUCH_UP = 501,
    LIBINPUT_EVENT_TOUCH_MOTION = 502,
    LIBINPUT_EVENT_TOUCH_CANCEL = 503,
    LIBINPUT_EVENT_TOUCH_FRAME = 504,
    LIBINPUT_EVENT_TABLET_TOOL_AXIS = 600,
    LIBINPUT_EVENT_TABLET_TOOL_PROXIMITY = 601,
    LIBINPUT_EVENT_TABLET_TOOL_TIP = 602,
    LIBINPUT_EVENT_TABLET_TOOL_BUTTON = 603,
    LIBINPUT_EVENT_TABLET_PAD_BUTTON = 700,
    LIBINPUT_EVENT_TABLET_PAD_RING = 701,
    LIBINPUT_EVENT_TABLET_PAD_STRIP = 702,
    LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN = 800,
    LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE = 801,
    LIBINPUT_EVENT_GESTURE_SWIPE_END = 802,
    LIBINPUT_EVENT_GESTURE_PINCH_BEGIN = 803,
    LIBINPUT_EVENT_GESTURE_PINCH_UPDATE = 804,
    LIBINPUT_EVENT_GESTURE_PINCH_END = 805,
    LIBINPUT_EVENT_SWITCH_TOGGLE = 900,
}
extern "C" {
    pub fn libinput_event_destroy(event: *mut libinput_event);
}
extern "C" {
    pub fn libinput_event_get_type(event: *mut libinput_event)
     -> libinput_event_type;
}
extern "C" {
    pub fn libinput_event_get_context(event: *mut libinput_event)
     -> *mut libinput;
}
extern "C" {
    pub fn libinput_event_get_device(event: *mut libinput_event)
     -> *mut libinput_device;
}
extern "C" {
    pub fn libinput_event_get_pointer_event(event: *mut libinput_event)
     -> *mut libinput_event_pointer;
}
extern "C" {
    pub fn libinput_event_get_keyboard_event(event: *mut libinput_event)
     -> *mut libinput_event_keyboard;
}
extern "C" {
    pub fn libinput_event_get_touch_event(event: *mut libinput_event)
     -> *mut libinput_event_touch;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libinput_event_gesture {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libinput_event_get_gesture_event(event: *mut libinput_event)
     -> *mut libinput_event_gesture;
}
extern "C" {
    pub fn libinput_event_get_tablet_tool_event(event: *mut libinput_event)
     -> *mut libinput_event_tablet_tool;
}
extern "C" {
    pub fn libinput_event_get_tablet_pad_event(event: *mut libinput_event)
     -> *mut libinput_event_tablet_pad;
}
extern "C" {
    pub fn libinput_event_get_switch_event(event: *mut libinput_event)
     -> *mut libinput_event_switch;
}
extern "C" {
    pub fn libinput_event_get_device_notify_event(event: *mut libinput_event)
     -> *mut libinput_event_device_notify;
}
extern "C" {
    pub fn libinput_event_device_notify_get_base_event(event:
                                                           *mut libinput_event_device_notify)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_keyboard_get_time(event:
                                                *mut libinput_event_keyboard)
     -> u32;
}
extern "C" {
    pub fn libinput_event_keyboard_get_time_usec(event:
                                                     *mut libinput_event_keyboard)
     -> u64;
}
extern "C" {
    pub fn libinput_event_keyboard_get_key(event:
                                               *mut libinput_event_keyboard)
     -> u32;
}
extern "C" {
    pub fn libinput_event_keyboard_get_key_state(event:
                                                     *mut libinput_event_keyboard)
     -> libinput_key_state;
}
extern "C" {
    pub fn libinput_event_keyboard_get_base_event(event:
                                                      *mut libinput_event_keyboard)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_keyboard_get_seat_key_count(event:
                                                          *mut libinput_event_keyboard)
     -> u32;
}
extern "C" {
    pub fn libinput_event_pointer_get_time(event: *mut libinput_event_pointer)
     -> u32;
}
extern "C" {
    pub fn libinput_event_pointer_get_time_usec(event:
                                                    *mut libinput_event_pointer)
     -> u64;
}
extern "C" {
    pub fn libinput_event_pointer_get_dx(event: *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_dy(event: *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_dx_unaccelerated(event:
                                                           *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_dy_unaccelerated(event:
                                                           *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_absolute_x(event:
                                                     *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_absolute_y(event:
                                                     *mut libinput_event_pointer)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_absolute_x_transformed(event:
                                                                 *mut libinput_event_pointer,
                                                             width: u32)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_absolute_y_transformed(event:
                                                                 *mut libinput_event_pointer,
                                                             height: u32)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_button(event:
                                                 *mut libinput_event_pointer)
     -> u32;
}
extern "C" {
    pub fn libinput_event_pointer_get_button_state(event:
                                                       *mut libinput_event_pointer)
     -> libinput_button_state;
}
extern "C" {
    pub fn libinput_event_pointer_get_seat_button_count(event:
                                                            *mut libinput_event_pointer)
     -> u32;
}
extern "C" {
    pub fn libinput_event_pointer_has_axis(event: *mut libinput_event_pointer,
                                           axis: libinput_pointer_axis)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_pointer_get_axis_value(event:
                                                     *mut libinput_event_pointer,
                                                 axis: libinput_pointer_axis)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_axis_source(event:
                                                      *mut libinput_event_pointer)
     -> libinput_pointer_axis_source;
}
extern "C" {
    pub fn libinput_event_pointer_get_axis_value_discrete(event:
                                                              *mut libinput_event_pointer,
                                                          axis:
                                                              libinput_pointer_axis)
     -> f64;
}
extern "C" {
    pub fn libinput_event_pointer_get_base_event(event:
                                                     *mut libinput_event_pointer)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_touch_get_time(event: *mut libinput_event_touch)
     -> u32;
}
extern "C" {
    pub fn libinput_event_touch_get_time_usec(event:
                                                  *mut libinput_event_touch)
     -> u64;
}
extern "C" {
    pub fn libinput_event_touch_get_slot(event: *mut libinput_event_touch)
     -> i32;
}
extern "C" {
    pub fn libinput_event_touch_get_seat_slot(event:
                                                  *mut libinput_event_touch)
     -> i32;
}
extern "C" {
    pub fn libinput_event_touch_get_x(event: *mut libinput_event_touch)
     -> f64;
}
extern "C" {
    pub fn libinput_event_touch_get_y(event: *mut libinput_event_touch)
     -> f64;
}
extern "C" {
    pub fn libinput_event_touch_get_x_transformed(event:
                                                      *mut libinput_event_touch,
                                                  width: u32) -> f64;
}
extern "C" {
    pub fn libinput_event_touch_get_y_transformed(event:
                                                      *mut libinput_event_touch,
                                                  height: u32) -> f64;
}
extern "C" {
    pub fn libinput_event_touch_get_base_event(event:
                                                   *mut libinput_event_touch)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_gesture_get_time(event: *mut libinput_event_gesture)
     -> u32;
}
extern "C" {
    pub fn libinput_event_gesture_get_time_usec(event:
                                                    *mut libinput_event_gesture)
     -> u64;
}
extern "C" {
    pub fn libinput_event_gesture_get_base_event(event:
                                                     *mut libinput_event_gesture)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_gesture_get_finger_count(event:
                                                       *mut libinput_event_gesture)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_gesture_get_cancelled(event:
                                                    *mut libinput_event_gesture)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_gesture_get_dx(event: *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_gesture_get_dy(event: *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_gesture_get_dx_unaccelerated(event:
                                                           *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_gesture_get_dy_unaccelerated(event:
                                                           *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_gesture_get_scale(event:
                                                *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_gesture_get_angle_delta(event:
                                                      *mut libinput_event_gesture)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_base_event(event:
                                                         *mut libinput_event_tablet_tool)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_tablet_tool_x_has_changed(event:
                                                        *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_y_has_changed(event:
                                                        *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_pressure_has_changed(event:
                                                               *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_distance_has_changed(event:
                                                               *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_tilt_x_has_changed(event:
                                                             *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_tilt_y_has_changed(event:
                                                             *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_rotation_has_changed(event:
                                                               *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_slider_has_changed(event:
                                                             *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_wheel_has_changed(event:
                                                            *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_x(event:
                                                *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_y(event:
                                                *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_dx(event:
                                                 *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_dy(event:
                                                 *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_pressure(event:
                                                       *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_distance(event:
                                                       *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_tilt_x(event:
                                                     *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_tilt_y(event:
                                                     *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_rotation(event:
                                                       *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_slider_position(event:
                                                              *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_wheel_delta(event:
                                                          *mut libinput_event_tablet_tool)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_wheel_delta_discrete(event:
                                                                   *mut libinput_event_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_x_transformed(event:
                                                            *mut libinput_event_tablet_tool,
                                                        width: u32) -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_y_transformed(event:
                                                            *mut libinput_event_tablet_tool,
                                                        height: u32) -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_tool(event:
                                                   *mut libinput_event_tablet_tool)
     -> *mut libinput_tablet_tool;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_proximity_state(event:
                                                              *mut libinput_event_tablet_tool)
     -> libinput_tablet_tool_proximity_state;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_tip_state(event:
                                                        *mut libinput_event_tablet_tool)
     -> libinput_tablet_tool_tip_state;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_button(event:
                                                     *mut libinput_event_tablet_tool)
     -> u32;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_button_state(event:
                                                           *mut libinput_event_tablet_tool)
     -> libinput_button_state;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_seat_button_count(event:
                                                                *mut libinput_event_tablet_tool)
     -> u32;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_time(event:
                                                   *mut libinput_event_tablet_tool)
     -> u32;
}
extern "C" {
    pub fn libinput_event_tablet_tool_get_time_usec(event:
                                                        *mut libinput_event_tablet_tool)
     -> u64;
}
extern "C" {
    pub fn libinput_tablet_tool_get_type(tool: *mut libinput_tablet_tool)
     -> libinput_tablet_tool_type;
}
extern "C" {
    pub fn libinput_tablet_tool_get_tool_id(tool: *mut libinput_tablet_tool)
     -> u64;
}
extern "C" {
    pub fn libinput_tablet_tool_ref(tool: *mut libinput_tablet_tool)
     -> *mut libinput_tablet_tool;
}
extern "C" {
    pub fn libinput_tablet_tool_unref(tool: *mut libinput_tablet_tool)
     -> *mut libinput_tablet_tool;
}
extern "C" {
    pub fn libinput_tablet_tool_has_pressure(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_distance(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_tilt(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_rotation(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_slider(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_wheel(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_has_button(tool: *mut libinput_tablet_tool,
                                           code: u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_is_unique(tool: *mut libinput_tablet_tool)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_tablet_tool_get_serial(tool: *mut libinput_tablet_tool)
     -> u64;
}
extern "C" {
    pub fn libinput_tablet_tool_get_user_data(tool: *mut libinput_tablet_tool)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn libinput_tablet_tool_set_user_data(tool: *mut libinput_tablet_tool,
                                              user_data:
                                                  *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_base_event(event:
                                                        *mut libinput_event_tablet_pad)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_ring_position(event:
                                                           *mut libinput_event_tablet_pad)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_ring_number(event:
                                                         *mut libinput_event_tablet_pad)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_ring_source(event:
                                                         *mut libinput_event_tablet_pad)
     -> libinput_tablet_pad_ring_axis_source;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_strip_position(event:
                                                            *mut libinput_event_tablet_pad)
     -> f64;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_strip_number(event:
                                                          *mut libinput_event_tablet_pad)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_strip_source(event:
                                                          *mut libinput_event_tablet_pad)
     -> libinput_tablet_pad_strip_axis_source;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_button_number(event:
                                                           *mut libinput_event_tablet_pad)
     -> u32;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_button_state(event:
                                                          *mut libinput_event_tablet_pad)
     -> libinput_button_state;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_mode(event:
                                                  *mut libinput_event_tablet_pad)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_mode_group(event:
                                                        *mut libinput_event_tablet_pad)
     -> *mut libinput_tablet_pad_mode_group;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_time(event:
                                                  *mut libinput_event_tablet_pad)
     -> u32;
}
extern "C" {
    pub fn libinput_event_tablet_pad_get_time_usec(event:
                                                       *mut libinput_event_tablet_pad)
     -> u64;
}
extern "C" {
    pub fn libinput_event_switch_get_switch(event: *mut libinput_event_switch)
     -> libinput_switch;
}
extern "C" {
    pub fn libinput_event_switch_get_switch_state(event:
                                                      *mut libinput_event_switch)
     -> libinput_switch_state;
}
extern "C" {
    pub fn libinput_event_switch_get_base_event(event:
                                                    *mut libinput_event_switch)
     -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_event_switch_get_time(event: *mut libinput_event_switch)
     -> u32;
}
extern "C" {
    pub fn libinput_event_switch_get_time_usec(event:
                                                   *mut libinput_event_switch)
     -> u64;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct libinput_interface {
    pub open_restricted: ::std::option::Option<unsafe extern "C" fn(path:
                                                                        *const ::std::os::raw::c_char,
                                                                    flags:
                                                                        ::std::os::raw::c_int,
                                                                    user_data:
                                                                        *mut ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>,
    pub close_restricted: ::std::option::Option<unsafe extern "C" fn(fd:
                                                                         ::std::os::raw::c_int,
                                                                     user_data:
                                                                         *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_libinput_interface() {
    assert_eq!(::std::mem::size_of::<libinput_interface>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( libinput_interface ) ));
    assert_eq! (::std::mem::align_of::<libinput_interface>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( libinput_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const libinput_interface ) ) . open_restricted
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( libinput_interface ) ,
                "::" , stringify ! ( open_restricted ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const libinput_interface ) ) . close_restricted
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( libinput_interface ) ,
                "::" , stringify ! ( close_restricted ) ));
}
impl Clone for libinput_interface {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn libinput_udev_create_context(interface: *const libinput_interface,
                                        user_data:
                                            *mut ::std::os::raw::c_void,
                                        udev: *mut udev) -> *mut libinput;
}
extern "C" {
    pub fn libinput_udev_assign_seat(libinput: *mut libinput,
                                     seat_id: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_path_create_context(interface: *const libinput_interface,
                                        user_data:
                                            *mut ::std::os::raw::c_void)
     -> *mut libinput;
}
extern "C" {
    pub fn libinput_path_add_device(libinput: *mut libinput,
                                    path: *const ::std::os::raw::c_char)
     -> *mut libinput_device;
}
extern "C" {
    pub fn libinput_path_remove_device(device: *mut libinput_device);
}
extern "C" {
    pub fn libinput_get_fd(libinput: *mut libinput) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_dispatch(libinput: *mut libinput)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_get_event(libinput: *mut libinput) -> *mut libinput_event;
}
extern "C" {
    pub fn libinput_next_event_type(libinput: *mut libinput)
     -> libinput_event_type;
}
extern "C" {
    pub fn libinput_set_user_data(libinput: *mut libinput,
                                  user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_get_user_data(libinput: *mut libinput)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn libinput_resume(libinput: *mut libinput) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_suspend(libinput: *mut libinput);
}
extern "C" {
    pub fn libinput_ref(libinput: *mut libinput) -> *mut libinput;
}
extern "C" {
    pub fn libinput_unref(libinput: *mut libinput) -> *mut libinput;
}
extern "C" {
    pub fn libinput_log_set_priority(libinput: *mut libinput,
                                     priority: libinput_log_priority);
}
extern "C" {
    pub fn libinput_log_get_priority(libinput: *const libinput)
     -> libinput_log_priority;
}
pub type libinput_log_handler =
    ::std::option::Option<unsafe extern "C" fn(libinput: *mut libinput,
                                               priority:
                                                   libinput_log_priority,
                                               format:
                                                   *const ::std::os::raw::c_char,
                                               args: *mut __va_list_tag)>;
extern "C" {
    pub fn libinput_log_set_handler(libinput: *mut libinput,
                                    log_handler: libinput_log_handler);
}
extern "C" {
    pub fn libinput_seat_ref(seat: *mut libinput_seat) -> *mut libinput_seat;
}
extern "C" {
    pub fn libinput_seat_unref(seat: *mut libinput_seat)
     -> *mut libinput_seat;
}
extern "C" {
    pub fn libinput_seat_set_user_data(seat: *mut libinput_seat,
                                       user_data:
                                           *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_seat_get_user_data(seat: *mut libinput_seat)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn libinput_seat_get_context(seat: *mut libinput_seat)
     -> *mut libinput;
}
extern "C" {
    pub fn libinput_seat_get_physical_name(seat: *mut libinput_seat)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libinput_seat_get_logical_name(seat: *mut libinput_seat)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libinput_device_ref(device: *mut libinput_device)
     -> *mut libinput_device;
}
extern "C" {
    pub fn libinput_device_unref(device: *mut libinput_device)
     -> *mut libinput_device;
}
extern "C" {
    pub fn libinput_device_set_user_data(device: *mut libinput_device,
                                         user_data:
                                             *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_device_get_user_data(device: *mut libinput_device)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn libinput_device_get_context(device: *mut libinput_device)
     -> *mut libinput;
}
extern "C" {
    pub fn libinput_device_get_device_group(device: *mut libinput_device)
     -> *mut libinput_device_group;
}
extern "C" {
    pub fn libinput_device_get_sysname(device: *mut libinput_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libinput_device_get_name(device: *mut libinput_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libinput_device_get_id_product(device: *mut libinput_device)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_device_get_id_vendor(device: *mut libinput_device)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_device_get_output_name(device: *mut libinput_device)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libinput_device_get_seat(device: *mut libinput_device)
     -> *mut libinput_seat;
}
extern "C" {
    pub fn libinput_device_set_seat_logical_name(device: *mut libinput_device,
                                                 name:
                                                     *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_get_udev_device(device: *mut libinput_device)
     -> *mut udev_device;
}
extern "C" {
    pub fn libinput_device_led_update(device: *mut libinput_device,
                                      leds: libinput_led);
}
extern "C" {
    pub fn libinput_device_has_capability(device: *mut libinput_device,
                                          capability:
                                              libinput_device_capability)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_get_size(device: *mut libinput_device,
                                    width: *mut f64, height: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_pointer_has_button(device: *mut libinput_device,
                                              code: u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_keyboard_has_key(device: *mut libinput_device,
                                            code: u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_tablet_pad_get_num_buttons(device:
                                                          *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_tablet_pad_get_num_rings(device:
                                                        *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_tablet_pad_get_num_strips(device:
                                                         *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_group_ref(group: *mut libinput_device_group)
     -> *mut libinput_device_group;
}
extern "C" {
    pub fn libinput_device_group_unref(group: *mut libinput_device_group)
     -> *mut libinput_device_group;
}
extern "C" {
    pub fn libinput_device_group_set_user_data(group:
                                                   *mut libinput_device_group,
                                               user_data:
                                                   *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn libinput_device_group_get_user_data(group:
                                                   *mut libinput_device_group)
     -> *mut ::std::os::raw::c_void;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_status {
    LIBINPUT_CONFIG_STATUS_SUCCESS = 0,
    LIBINPUT_CONFIG_STATUS_UNSUPPORTED = 1,
    LIBINPUT_CONFIG_STATUS_INVALID = 2,
}
extern "C" {
    pub fn libinput_config_status_to_str(status: libinput_config_status)
     -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_tap_state {
    LIBINPUT_CONFIG_TAP_DISABLED = 0,
    LIBINPUT_CONFIG_TAP_ENABLED = 1,
}
extern "C" {
    pub fn libinput_device_config_tap_get_finger_count(device:
                                                           *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_tap_set_enabled(device:
                                                      *mut libinput_device,
                                                  enable:
                                                      libinput_config_tap_state)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_tap_get_enabled(device:
                                                      *mut libinput_device)
     -> libinput_config_tap_state;
}
extern "C" {
    pub fn libinput_device_config_tap_get_default_enabled(device:
                                                              *mut libinput_device)
     -> libinput_config_tap_state;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_tap_button_map {
    LIBINPUT_CONFIG_TAP_MAP_LRM = 0,
    LIBINPUT_CONFIG_TAP_MAP_LMR = 1,
}
extern "C" {
    pub fn libinput_device_config_tap_set_button_map(device:
                                                         *mut libinput_device,
                                                     map:
                                                         libinput_config_tap_button_map)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_tap_get_button_map(device:
                                                         *mut libinput_device)
     -> libinput_config_tap_button_map;
}
extern "C" {
    pub fn libinput_device_config_tap_get_default_button_map(device:
                                                                 *mut libinput_device)
     -> libinput_config_tap_button_map;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_drag_state {
    LIBINPUT_CONFIG_DRAG_DISABLED = 0,
    LIBINPUT_CONFIG_DRAG_ENABLED = 1,
}
extern "C" {
    pub fn libinput_device_config_tap_set_drag_enabled(device:
                                                           *mut libinput_device,
                                                       enable:
                                                           libinput_config_drag_state)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_tap_get_drag_enabled(device:
                                                           *mut libinput_device)
     -> libinput_config_drag_state;
}
extern "C" {
    pub fn libinput_device_config_tap_get_default_drag_enabled(device:
                                                                   *mut libinput_device)
     -> libinput_config_drag_state;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_drag_lock_state {
    LIBINPUT_CONFIG_DRAG_LOCK_DISABLED = 0,
    LIBINPUT_CONFIG_DRAG_LOCK_ENABLED = 1,
}
extern "C" {
    pub fn libinput_device_config_tap_set_drag_lock_enabled(device:
                                                                *mut libinput_device,
                                                            enable:
                                                                libinput_config_drag_lock_state)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_tap_get_drag_lock_enabled(device:
                                                                *mut libinput_device)
     -> libinput_config_drag_lock_state;
}
extern "C" {
    pub fn libinput_device_config_tap_get_default_drag_lock_enabled(device:
                                                                        *mut libinput_device)
     -> libinput_config_drag_lock_state;
}
extern "C" {
    pub fn libinput_device_config_calibration_has_matrix(device:
                                                             *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_calibration_set_matrix(device:
                                                             *mut libinput_device,
                                                         matrix: *const f32)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_calibration_get_matrix(device:
                                                             *mut libinput_device,
                                                         matrix: *mut f32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_calibration_get_default_matrix(device:
                                                                     *mut libinput_device,
                                                                 matrix:
                                                                     *mut f32)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_send_events_mode {
    LIBINPUT_CONFIG_SEND_EVENTS_ENABLED = 0,
    LIBINPUT_CONFIG_SEND_EVENTS_DISABLED = 1,
    LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE = 2,
}
extern "C" {
    pub fn libinput_device_config_send_events_get_modes(device:
                                                            *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_send_events_set_mode(device:
                                                           *mut libinput_device,
                                                       mode: u32)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_send_events_get_mode(device:
                                                           *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_send_events_get_default_mode(device:
                                                                   *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_accel_is_available(device:
                                                         *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_accel_set_speed(device:
                                                      *mut libinput_device,
                                                  speed: f64)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_accel_get_speed(device:
                                                      *mut libinput_device)
     -> f64;
}
extern "C" {
    pub fn libinput_device_config_accel_get_default_speed(device:
                                                              *mut libinput_device)
     -> f64;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_accel_profile {
    LIBINPUT_CONFIG_ACCEL_PROFILE_NONE = 0,
    LIBINPUT_CONFIG_ACCEL_PROFILE_FLAT = 1,
    LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE = 2,
}
extern "C" {
    pub fn libinput_device_config_accel_get_profiles(device:
                                                         *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_accel_set_profile(device:
                                                        *mut libinput_device,
                                                    mode:
                                                        libinput_config_accel_profile)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_accel_get_profile(device:
                                                        *mut libinput_device)
     -> libinput_config_accel_profile;
}
extern "C" {
    pub fn libinput_device_config_accel_get_default_profile(device:
                                                                *mut libinput_device)
     -> libinput_config_accel_profile;
}
extern "C" {
    pub fn libinput_device_config_scroll_has_natural_scroll(device:
                                                                *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_scroll_set_natural_scroll_enabled(device:
                                                                        *mut libinput_device,
                                                                    enable:
                                                                        ::std::os::raw::c_int)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_natural_scroll_enabled(device:
                                                                        *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_default_natural_scroll_enabled(device:
                                                                                *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_left_handed_is_available(device:
                                                               *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_left_handed_set(device:
                                                      *mut libinput_device,
                                                  left_handed:
                                                      ::std::os::raw::c_int)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_left_handed_get(device:
                                                      *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_left_handed_get_default(device:
                                                              *mut libinput_device)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_click_method {
    LIBINPUT_CONFIG_CLICK_METHOD_NONE = 0,
    LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS = 1,
    LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER = 2,
}
extern "C" {
    pub fn libinput_device_config_click_get_methods(device:
                                                        *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_click_set_method(device:
                                                       *mut libinput_device,
                                                   method:
                                                       libinput_config_click_method)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_click_get_method(device:
                                                       *mut libinput_device)
     -> libinput_config_click_method;
}
extern "C" {
    pub fn libinput_device_config_click_get_default_method(device:
                                                               *mut libinput_device)
     -> libinput_config_click_method;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_middle_emulation_state {
    LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED = 0,
    LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED = 1,
}
extern "C" {
    pub fn libinput_device_config_middle_emulation_is_available(device:
                                                                    *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_middle_emulation_set_enabled(device:
                                                                   *mut libinput_device,
                                                               enable:
                                                                   libinput_config_middle_emulation_state)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_middle_emulation_get_enabled(device:
                                                                   *mut libinput_device)
     -> libinput_config_middle_emulation_state;
}
extern "C" {
    pub fn libinput_device_config_middle_emulation_get_default_enabled(device:
                                                                           *mut libinput_device)
     -> libinput_config_middle_emulation_state;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_scroll_method {
    LIBINPUT_CONFIG_SCROLL_NO_SCROLL = 0,
    LIBINPUT_CONFIG_SCROLL_2FG = 1,
    LIBINPUT_CONFIG_SCROLL_EDGE = 2,
    LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN = 4,
}
extern "C" {
    pub fn libinput_device_config_scroll_get_methods(device:
                                                         *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_scroll_set_method(device:
                                                        *mut libinput_device,
                                                    method:
                                                        libinput_config_scroll_method)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_method(device:
                                                        *mut libinput_device)
     -> libinput_config_scroll_method;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_default_method(device:
                                                                *mut libinput_device)
     -> libinput_config_scroll_method;
}
extern "C" {
    pub fn libinput_device_config_scroll_set_button(device:
                                                        *mut libinput_device,
                                                    button: u32)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_button(device:
                                                        *mut libinput_device)
     -> u32;
}
extern "C" {
    pub fn libinput_device_config_scroll_get_default_button(device:
                                                                *mut libinput_device)
     -> u32;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum libinput_config_dwt_state {
    LIBINPUT_CONFIG_DWT_DISABLED = 0,
    LIBINPUT_CONFIG_DWT_ENABLED = 1,
}
extern "C" {
    pub fn libinput_device_config_dwt_is_available(device:
                                                       *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_dwt_set_enabled(device:
                                                      *mut libinput_device,
                                                  enable:
                                                      libinput_config_dwt_state)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_dwt_get_enabled(device:
                                                      *mut libinput_device)
     -> libinput_config_dwt_state;
}
extern "C" {
    pub fn libinput_device_config_dwt_get_default_enabled(device:
                                                              *mut libinput_device)
     -> libinput_config_dwt_state;
}
extern "C" {
    pub fn libinput_device_config_rotation_is_available(device:
                                                            *mut libinput_device)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libinput_device_config_rotation_set_angle(device:
                                                         *mut libinput_device,
                                                     degrees_cw:
                                                         ::std::os::raw::c_uint)
     -> libinput_config_status;
}
extern "C" {
    pub fn libinput_device_config_rotation_get_angle(device:
                                                         *mut libinput_device)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn libinput_device_config_rotation_get_default_angle(device:
                                                                 *mut libinput_device)
     -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
